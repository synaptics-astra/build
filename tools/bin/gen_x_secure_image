#!/usr/bin/env python3

""" %prog [options]
"""

""" Check version """
import sys
sys.dont_write_bytecode = True

if sys.hexversion < 0x03040000:
  raise Exception("ERROR: Python 3.4 or newer is required")

""" Import modules """
import os
import argparse
import configparser
import shutil
import subprocess

from pathlib import Path
#
# Functions
#

def exec_cmd(args):
  print("+ execute command: ", str(args))

  p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=dict(os.environ))
  (stdout, stderr) = p.communicate()
  """ print(stdout.decode()) """
  print(stderr.decode())
  assert p.returncode == 0

#
# Classes
#

class GenXSecureImage:
  def __init__(self):
    self.opts = argparse.Namespace()
    self.opts.basedir_security = os.path.realpath(os.path.dirname(sys.argv[0]) + "/../..")

  def parse_args(self):
    """ parse command line arguments """
    parser = argparse.ArgumentParser(description="Generate GenX Secure Image")

    parser.add_argument('--chip-name', nargs=1)
    parser.add_argument('--chip-rev', nargs=1)
    parser.add_argument('--img_type', nargs=1)
    parser.add_argument('--key_type', nargs=1)
    parser.add_argument('--seg_id', nargs=1, default=["0x00000000"])
    parser.add_argument('--seg_id_mask', nargs=1, default=["0xFFFFFFFF"])
    parser.add_argument('--version', nargs=1, default=["0x00000000"])
    parser.add_argument('--version_mask', nargs=1, default=["0xFFFFFFFF"])
    parser.add_argument('--extras', nargs=1)
    parser.add_argument('--length', nargs=1)
    parser.add_argument('--in_payload', nargs=1)
    parser.add_argument('--out_store', nargs=1)
    parser.add_argument('--workdir-security-tools', nargs=1)
    parser.add_argument('--workdir-security-keys', nargs=1)

    self.opts = parser.parse_args(args=sys.argv[1:], namespace=self.opts)


    assert(self.opts.chip_name is not None)
    assert(self.opts.chip_rev is not None)
    assert(self.opts.img_type is not None)
    assert(self.opts.key_type is not None)

    if self.opts.img_type[0] != "DDR_FW0" and self.opts.img_type[0] != "DDR_FW1":
        assert(self.opts.extras is not None)

    assert(self.opts.length is not None)
    assert(self.opts.in_payload is not None)
    assert(self.opts.out_store is not None)

    self.setup_workdir()

  def setup_workdir(self):
    """ print(self.opts) """

    if self.opts.workdir_security_tools is None:
      self.opts.workdir_security_tools = self.opts.basedir_security + "/tools"
    else:
      self.opts.workdir_security_tools = self.opts.workdir_security_tools[0]

    if self.opts.workdir_security_keys is None:
      self.opts.workdir_security_keys = self.opts.basedir_security + "/keys/"
      self.opts.workdir_security_keys = self.opts.workdir_security_keys + self.opts.chip_name[0]
      self.opts.workdir_security_keys += "/" + self.opts.chip_rev[0] + "/generic"
      self.opts.workdir_security_keys += "/" + self.opts.key_type[0]
    else:
      self.opts.workdir_security_keys = self.opts.workdir_security_keys[0] + "/generic"
      self.opts.workdir_security_keys += "/" + self.opts.key_type[0]

    """ print(self.opts) """

  def sign_image(self):
    """ assign AES and RSA """
    print(self.opts)

    aes_list = {'MINILOADER':'MDK_MINI_LOADER.bin',
                'SYS_INIT': 'MDK_SYS_INIT.bin',
                'TZK_BOOT_PARAMETER': 'MDK_TZK_BOOT_PARAMETER.bin',
                'TA': 'TA_K1_AES_Key_TA.bin',
                'TSP_FW': 'MDK_TSP_FW.bin',
                'DSP_FW': 'MDK_DSP_FW.bin',
                'GPU_FW': 'MDK_GPU_FW.bin',
                'DDR_FW0': 'MDK_DDR_FW0.bin',
                'DDR_FW1': 'MDK_DDR_FW1.bin'}

    rsa_list = {'MINILOADER': 'K1_BOOT_B.rsa.priv.pem',
                'UBOOT': 'K1_BOOT_B.rsa.priv.pem',
                'SYS_INIT': 'K1_BOOT_B.rsa.priv.pem',
                'SCS_DATA_PARAM': 'K1_BOOT_B.rsa.priv.pem',
                'TZK_BOOT_PARAMETER': 'K1_TEE_B.rsa.priv.pem',
                'TA': 'TA_K1_RSA.priv.pem',
                'TZK_OEM_SETTINGS': 'K1_REE_A.rsa.priv.pem',
                'FASTBOOT': 'K1_REE_A.rsa.priv.pem',
                'FASTLOGO': 'K1_REE_A.rsa.priv.pem',
                'BOOT_LOADER': 'K1_REE_A.rsa.priv.pem',
                'AVB_KEYS': 'K1_REE_C.rsa.priv.pem',
                'LINUX_KERNEL': 'K1_REE_C.rsa.priv.pem',
                'SM_FW': 'K1_REE_B.rsa.priv.pem',
                'TSP_FW': 'K1_TEE_D.rsa.priv.pem',
                'DSP_FW': 'K1_TEE_C.rsa.priv.pem',
                'GPU_FW': 'K1_TEE_C.rsa.priv.pem'}

    if aes_list.get(self.opts.img_type[0]) is not None:
      aes_key = self.opts.workdir_security_keys + "/" + aes_list.get(self.opts.img_type[0])

    if self.opts.img_type[0] != "DDR_FW0" and self.opts.img_type[0] != "DDR_FW1":
      signing_key = self.opts.workdir_security_keys + "/" + rsa_list.get(self.opts.img_type[0])

    """ Command and arguments """
    exec_bin = Path(self.opts.workdir_security_tools) / 'genx_img'
    exec_bin = exec_bin.as_posix()

    if not os.access(exec_bin, os.X_OK):
        exec_bin = Path(self.opts.workdir_security_tools).parent / 'lib' / 'sec_tools' / 'bin' / 'genx_img'
        exec_bin = exec_bin.as_posix()
        if not os.access(exec_bin, os.X_OK):
            exec_bin = shutil.which('genx_img')
    if not exec_bin:
      raise Exception("can't find genx_img")

    cmd2run = [ exec_bin ]

    cmd2run.extend(["-t", self.opts.img_type[0]])
    if aes_list.get(self.opts.img_type[0]) is not None:
      cmd2run.extend(["-k", aes_key])
    else:
      cmd2run.extend(["--noenc"])

    if self.opts.img_type[0] != "DDR_FW0" and self.opts.img_type[0] != "DDR_FW1":
      cmd2run.extend(["-n", signing_key])
      cmd2run.extend(["-s", self.opts.seg_id[0]])
      cmd2run.extend(["-S", self.opts.seg_id_mask[0]])
      cmd2run.extend(["-r", self.opts.version[0]])
      cmd2run.extend(["-R", self.opts.version_mask[0]])
      cmd2run.extend(["-x", self.opts.extras[0]])

    cmd2run.extend(["-l", self.opts.length[0]])
    cmd2run.extend(["-i", self.opts.in_payload[0]])
    cmd2run.extend(["-o", self.opts.out_store[0]])

    exec_cmd(cmd2run)

#
# Main
#

def main():
  genXSecImg = GenXSecureImage()
  genXSecImg.parse_args()

  """
  print("\n")
  print(genXSecImg.opts)
  """

  genXSecImg.sign_image()

if __name__ == "__main__":
  exitcode = main()
  sys.exit(exitcode)
