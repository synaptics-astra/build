TZK_MagicNum=0x68656164
TZK_OemID=(0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0)
TZK_FooterMagicNum=0x666f6f74
TZK_SegID=0x0

l_endian32() {
  echo `printf "%08x"  $1` | grep -o .. | tac | echo "$(tr -d '\n')" | xxd -r -p
}

gen_tz_enc_tzk_eheader() {
  local f_tzk_raw
  local f_tzk_eheader
  local f_tzk_new_raw

  # Process arguments
  f_tzk_raw=$1; shift
  f_tzk_eheader=$1; shift

  [ "x${f_tzk_raw}" != "x" ]

  f_tzk_new_raw="$(dirname ${f_tzk_raw})/$(basename ${f_tzk_raw} .bin)_eheader.bin"

  l_endian32 $TZK_MagicNum > $f_tzk_eheader
  l_endian32 64 >> $f_tzk_eheader
  for i in {0..7}
  do
    l_endian32 ${TZK_OemID[$i]} >> $f_tzk_eheader
  done
  l_endian32 $TZK_SegID >> $f_tzk_eheader
  echo `printf "%032x" 0` | xxd -r -p >> $f_tzk_eheader
  l_endian32 $TZK_FooterMagicNum >> $f_tzk_eheader

  cat $f_tzk_eheader $f_tzk_raw > $f_tzk_new_raw
}

gen2_secure_image() {
  v_image_type=$1; shift
  f_input=$1; shift
  f_output=$1; shift

  ### Check input file ###
  [ -f $f_input ]

  ### Exectuable for generating secure image ###
  if [ "is${CONFIG_RDK_SYS}" != "isy" ]; then
    exec_cmd=${security_tools_path}gen_secure_image
    [ -x $exec_cmd ]
  else
    exec_cmd=gen_secure_image
  fi

  ### Prepare arguments ###
  unset exec_args

  # Codetype
  case "${v_image_type}" in
    "tz")
      exec_args="${exec_args} --code-type=4"
      if [ -f ${workdir_security_ver}/codetype_4/config ]; then
        exec_args="${exec_args} --security-config-path=${security_keys_path}/mid_0000000${syna_chip_mid}/codetype_4/config"
      fi
      ;;
    "bparam")
      exec_args="${exec_args} --code-type=2"
      ;;
    *) /bin/false ;;
  esac

  local MARKET_ID=`printf 0x%x ${syna_chip_mid}`
  # Other parameters
  exec_args="${exec_args} --chip-name=${syna_chip_name}"
  exec_args="${exec_args} --chip-rev=${syna_chip_rev}"
  exec_args="${exec_args} --market-id=${syna_chip_mid}"
  exec_args="${exec_args} --workdir-security-tools=${security_tools_path}"
  exec_args="${exec_args} --workdir-security-keys=${security_keys_path}"

  exec_args="${exec_args} --custk-type=1"
  exec_args="${exec_args} --rsak-type=1"

  # Input and output
  exec_args="${exec_args} --input-file=${f_input} --output-file=${f_output}"

  ### Generate secure image ###
  eval ${exec_cmd} "${exec_args}"
}

genx_secure_image() {
  v_image_type=$1; shift
  in_extras=$1; shift
  in_length=$1; shift
  f_input=$1; shift
  f_output=$1; shift

  ### Check input file ###
  [ -f $f_input ]

  ### Exectuable for generating secure image ###
  if [ "is${CONFIG_RDK_SYS}" != "isy" ]; then
    exec_cmd=${security_tools_path}gen_x_secure_image
    [ -x $exec_cmd ]
  else
    exec_cmd=gen_x_secure_image
  fi

  ### Prepare arguments ###
  unset exec_args

  # Other parameters
  exec_args="${exec_args} --chip-name=${syna_chip_name}"
  exec_args="${exec_args} --chip-rev=${syna_chip_rev}"
  exec_args="${exec_args} --img_type=$v_image_type"
  exec_args="${exec_args} --key_type=tee"

  #exec_args="${exec_args} --seg_id=0x00000000"
  #exec_args="${exec_args} --seg_id_mask=0xFFFFFFFF"
  #exec_args="${exec_args} --version=0x00000001"
  #exec_args="${exec_args} --version_mask=0xFFFFFFFF"
  exec_args="${exec_args} --length=$in_length"
  exec_args="${exec_args} --extras=$in_extras"
  exec_args="${exec_args} --workdir-security-tools=${security_tools_path}"
  exec_args="${exec_args} --workdir-security-keys=${security_keys_path}"

  # Input and output
  exec_args="${exec_args} --in_payload=${f_input} --out_store=${f_output}"

  ### Generate secure image ###
  eval ${exec_cmd} "${exec_args}"
}
