#!/bin/bash

function print_exit()
{
    message=("$@")
    printf "\n[Exit] $message\n\n"
    exit
}

function init_vars()
{
    echo "SDK path: $SDK_PATH"
    cfg_gen=${SDK_PATH}/out/.config
    cfg_patch=${SDK_PATH}/cfg.patch
    cfg_chip=${SDK_PATH}/configs/release/sample_feature/sample_feature_dolphin_defconfig
}

function get_path()
{
    firstC=`dirname $1|cut -c 1`
    if  [ $firstC = '/' ] || [ $firstC = '~' ]; then
        echo $1
    else
        echo "`pwd`/$1"
    fi
}

function get_dirs()
{
    script=`get_path $0`
    script_dir=`dirname $script`
    SDK_PATH=$script_dir/../../
}

function begin_time()
{
    ts=$(date +%s%N)
}

function end_time()
{
    tt=$((($(date +%s%N) - $ts)/1000000)) ; echo "******** Time taken: $tt milliseconds ********"
}

function remove_override_section()
{
    echo "" >> $cfg_chip
    sed -i "/${pattern_override}/Q" $cfg_chip
    set_override_section_header=n
}

function append_override_section_header()
{
    if [ is$set_override_section_header == isn ]; then
        echo "$pattern_override" >> $cfg_chip
        echo "#### Automatically generated by override_config" >> $cfg_chip
        set_override_section_header=y
    fi
}

function gen_patch()
{
    remove_override_section

    ARR=("$@")
    ###echo "${ARR[@]}"

    for ((i = 0; i != ${#ARR[@]}; i++)); do
        ##echo "target $i: '${ARR[i]}'"

        IFS=' ' read -r -a array <<< "${ARR[i]}"
        IFS=${IFS_default}

        string=${array[0]};

        if [[ "${array[0]}" == *"-"* ]]; then
            config_option=${string:1:${#string}-1}
            ##echo "Remove CONFIG_${config_option}"
            ##sed -i "/${config_option}/d" $cfg_chip

        elif [[ "${array[0]}" == *"+"* ]]; then
            config_option=${string:1:${#string}-1}

            text=${ARR[i]}
            value="${text#* }"

            ##echo "Add    CONFIG_${config_option}=${value}"
            append_override_section_header
            echo "CONFIG_${config_option}=${value}" >> $cfg_chip

        else
            text=${ARR[i]}
            text1="${text#* }"
            value=${text1#*-> }

            ##echo "Modify CONFIG_${string}=${value}"
            append_override_section_header
            echo "CONFIG_${string}=${value}" >> $cfg_chip
        fi
    done

    echo "======================"
    cat $cfg_chip
    echo "======================"

    printf "\n\nDone: $cfg_chip\n\n"
}

function do_update()
{
    if [ "is$cfg_target" == "is" ]; then
        cfg_target="sample_feature_defconfig.target"
    fi

    do_override

    cp $cfg_target $cfg_gen

    pushd $SDK_PATH
    make menuconfig RELEASE=y
    popd

    cp $cfg_gen $cfg_target

    do_patch

    printf "\n\nDone: $cfg_target\n\n"
}

function do_patch()
{
    gen_diff

    begin_time

    IFS=$'\n'
    target_all=($(grep -P '^[-| |+].*' < ${cfg_patch}))
    IFS=${IFS_default}

    if [ -f "$cfg_patch" ]; then
        rm $cfg_patch
    fi

    gen_patch "${target_all[@]}"

    end_time
}

function do_override()
{
    if [ "is$cfg_target" == "is" ]; then
        cfg_target="sample_feature_defconfig.target"
    fi

    echo "**** Reference Config : $cfg_base"
    echo "**** Chip      Config : $cfg_chip"
    echo "**** Target    Config : $cfg_target"

    pushd $SDK_PATH
    make RELEASE=y $cfg_base
    popd

    cp ${cfg_gen} ${cfg_target}

    IFS=$'\n'

    targets=($(grep -P 'CONFIG_.*' < ${cfg_chip}))

    IFS=${IFS_default}

    for ((i = 0; i != ${#targets[@]}; i++)); do
       value=($(echo ${targets[i]} | grep -o 'CONFIG*[^ |=]*'))
       # echo "Modified: ${value} -> ${targets[i]}"
       sed -i "/$value[=| ]/c\\${targets[i]}" ${cfg_target}
    done

    cp ${cfg_target} ${cfg_gen}
    pushd $SDK_PATH
    make RELEASE=y oldconfig
    popd
    cp ${cfg_gen} ${cfg_target}

    printf "\n\nDone: $cfg_target\n\n"
}

function do_update()
{
    cfg_target=.config.tmp
    do_override

    cp $cfg_target $cfg_gen

    pushd $SDK_PATH
    if [[ "$SILIENT_UPDATE" = "y" ]]; then
        make RELEASE=y oldconfig
    else
        make menuconfig RELEASE=y
    fi
    popd

    cp $cfg_gen $cfg_target
    do_patch

    if [ -f "$cfg_target" ]; then
        rm $cfg_target
    fi
}

function gen_diff()
{
    tmp_base=
    tmp_new=
    cfg_tmp=.config.tmp

    pushd $SDK_PATH
    make RELEASE=y $cfg_base
    popd

    if [ "is$cfg_target" == "is" ]; then
        cp $cfg_gen $cfg_tmp
        tmp_base=$cfg_tmp

        pushd $SDK_PATH
        make menuconfig RELEASE=y
        popd

        tmp_new=$cfg_gen
    else
        if [ ! -f "$cfg_target" ]; then
            print_exit "$cfg_target does not exist."
        fi
        echo "**** Use existing config: $cfg_target"
        tmp_base=$cfg_gen
        tmp_new=$cfg_target
    fi

    ${SDK_PATH}/linux_5_15/scripts/diffconfig $tmp_base $tmp_new > $cfg_patch

    if [ -f "$cfg_tmp" ]; then
        rm $cfg_tmp
    fi

    if [[ ! -s "$cfg_patch" ]]; then
        print_exit "Terminate: Options are the same."
    fi
}

main() {
    cfg_base=sample_feature_defconfig
    cfg_target=""
    pattern_override="#### Chip Override Section"
    set_override_section_header=n
    IFS_default=${IFS}

    ACTION=""
    REF_CONFIG=""
    TARGET_CONFIG=""
    CHIP_CONFIG=""
    SILIENT_UPDATE=n
    while getopts a:r:t:c:s:h arg
        do case $arg in
        a)  ACTION=$OPTARG;;
        r)  REF_CONFIG=$OPTARG;;
        c)  CHIP_CONFIG=$OPTARG;;
        t)  TARGET_CONFIG=$OPTARG;;
        s)  SILIENT_UPDATE=$OPTARG;;
        h)  usage
            exit 0;;
        *)  usage
            exit 1;;
        esac
    done

    get_dirs
    init_vars

    ### -r
    if [ "is$REF_CONFIG" != "is" ]; then
        echo "[Param] base config: $REF_CONFIG"
        cfg_base=$REF_CONFIG
    fi

    ### -c
    if [ "is$CHIP_CONFIG" != "is" ]; then
        echo "[Param] chip config: $CHIP_CONFIG"
        cfg_chip=$CHIP_CONFIG
    fi

    ### -t
    if [ "is$TARGET_CONFIG" != "is" ]; then
        echo "[Param] diff config: $TARGET_CONFIG"
        cfg_target=$TARGET_CONFIG
    fi

    if [ "is$ACTION" != "is" ]; then
        do_$ACTION
    fi
}

main "${@}"
